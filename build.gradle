import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer

//======================================================================
// PROJECT
//======================================================================

group = 'com.sony.ebs.octopus3'

//======================================================================
// REPOSITORIES
//======================================================================

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://mvn.sony-europe.com/content/groups/global' }
        maven { url "http://oss.jfrog.org/repo" }
        maven { url "https://oss.sonatype.org/content/groups/public" }
        mavenCentral()
    }
    dependencies {
        classpath "io.ratpack:ratpack-gradle:$ratpackVersion"
        classpath "org.gradle.api.plugins:gradle-nexus-plugin:0.7.1"
        classpath "com.github.jengelman.gradle.plugins:shadow:1.0.2"
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

repositories {
    mavenLocal()
    maven { url 'https://mvn.sony-europe.com/content/groups/global' }
    mavenCentral()
    maven { url "http://oss.jfrog.org/repo" }
    maven { url "http://repo.springsource.org/repo" }
    maven { url "http://repo.spring.io/libs-release" }
}

//======================================================================
// PLUGINS
//======================================================================

apply plugin: 'io.ratpack.ratpack-groovy'
apply plugin: "groovy"
apply plugin: 'idea'
apply plugin: 'nexus'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'maven-publish'
apply plugin: 'release'

//======================================================================
// CONFIGURATIONS
//======================================================================

configurations {
    all {
        exclude module: "groovy"
    }
    cucumberRuntime {
        extendsFrom testRuntime
    }
    sshAntTask {
        logging.level = LogLevel.INFO
    }
}

idea {
    project {
        jdkName "1.7"
        languageLevel "1.7"
    }
    module {
        inheritOutputDirs = false
        outputDir = compileGroovy.destinationDir
        testOutputDir = compileTestGroovy.destinationDir

    }
}

run {
    systemProperty('environment', System.getProperty('environment'))
    systemProperty('logDirectory', System.getProperty('logDirectory'))
    systemProperty('logback.configurationFile', System.getProperty('logback.configurationFile'))
}
test { systemProperty('environment', System.getProperty('environment')) }

//======================================================================
// PACKAGING SHADOWJAR
// 1) Upload snapshots: gradle publishShadowPublicationToSnapshotsRepository
// 2) Upload releases: gradle publishShadowPublicationToReleasesRepository
//======================================================================

shadowJar {
    baseName = "${project.name}-app"
    archiveName = "${baseName}.jar"
    classifier = group
    transform(AppendingTransformer) {
        resource = "META-INF/spring.handlers"
    }
    transform(AppendingTransformer) {
        resource = "META-INF/spring.schemas"
    }
}

//======================================================================
// DEPENDENCIES
//======================================================================

dependencies {
    sshAntTask 'org.apache.ant:ant-jsch:1.9.2'

    compile 'com.sony.ebs.octopus3:octopus3-commons:1.4-SNAPSHOT'
    compile 'com.sony.ebs.octopus3:octopus3-commons-ratpack:1.4-SNAPSHOT'
    compile 'commons-io:commons-io:2.4'

    // cucumber
    cucumberRuntime files("${jar.archivePath}")
    testCompile 'junit:junit:4.11'
    testCompile 'info.cukes:cucumber-junit:1.1.7'
    testCompile 'info.cukes:cucumber-groovy:1.1.7'

    // spring
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-beans:$springVersion"

    // ratpack
    springloaded "org.springsource.springloaded:springloaded-core:1.1.4"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: "groovy-all"
    }
    compile ratpack.dependency("jackson")
    compile ratpack.dependency("rx")

    // logging
    compile group:"org.slf4j", name:"slf4j-api", version:"1.7.5"
    compile group:"org.slf4j", name:"jcl-over-slf4j", version:"1.7.5"
    compile group:"org.slf4j", name:"log4j-over-slf4j", version:"1.7.5"
    compile group:"ch.qos.logback", name:"logback-core", version:"1.1.2"
    compile group:"ch.qos.logback", name:"logback-classic", version:"1.1.2"

    // http clients
    compile 'com.ning:async-http-client:1.8.11', {
        exclude group: 'io.netty'
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.httpcomponents'
    }
    testCompile 'com.github.dreamhead:moco-core:0.9.1', {
        exclude group: 'org.slf4j'
        exclude group: 'org.apache.httpcomponents'
    }
    compile 'com.netflix.rxjava:rxjava-apache-http:0.19.2', {
       exclude group: 'org.apache.httpcomponents'
    }
    compile 'org.apache.httpcomponents:httpasyncclient:4.0.1'
    compile 'org.apache.httpcomponents:httpmime:4.3.4'
    compile 'org.apache.httpcomponents:httpcore:4.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.3.4'

}

//======================================================================
// TASKS
//======================================================================

task cucumber(type: JavaExec) {
    dependsOn assemble
    main = "cucumber.api.cli.Main"
    classpath = files(configurations.cucumberRuntime, sourceSets.test.runtimeClasspath)
    args = ['-f', 'pretty', '--glue', 'src/test/groovy', 'src/test/resources/cukes']
}

task wrapper(type: Wrapper) {
    gradleVersion = 2.0
}

//======================================================================
// DEPLOY ARTIFACTS
//======================================================================

nexus {
    attachSources = true
    attachTests = false
    attachJavadoc = false
    sign = false
    repositoryUrl = 'https://mvn.sony-europe.com/content/repositories/releases'
    snapshotRepositoryUrl = 'https://mvn.sony-europe.com/content/repositories/snapshots'
}

task devRelease() {
    description = "Upload shadow jar to dev server and restart application"
    dependsOn shadowJar
    logging.level = LogLevel.INFO

    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
    )

    ant.taskdef(
            name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.sshAntTask.asPath
    )

    // Create a new file for each execution to make
    // sure that execution doesn't fails in case
    // identity of host has been changed.
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def password = new String(devReleasePassword.decodeBase64())

    doLast {
        devUploadHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tUPLOADING TO {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.scp(
                        file: file("build/libs/${project.name}-app.jar"),
                        todir: "${devReleaseUser}@${host}:${devUploadPath}",
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts
                )
            } finally {
                knownHosts.delete()
            }
        }

        devStartHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tSTARTING {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.ssh(
                        host: host,
                        username: devReleaseUser,
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts,
                        command: devStartCommand
                )
            } finally {
                knownHosts.delete()
            }
        }
    }
}

task tqaRelease() {
    description = "Upload shadow jar to tqa server and restart application"
    dependsOn shadowJar
    logging.level = LogLevel.INFO

    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
    )

    ant.taskdef(
            name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.sshAntTask.asPath
    )

    // Create a new file for each execution to make
    // sure that execution doesn't fails in case
    // identity of host has been changed.
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def password = new String(tqaReleasePassword.decodeBase64())

    doLast {
        tqaUploadHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tUPLOADING TO {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.scp(
                        file: file("build/libs/${project.name}-app.jar"),
                        todir: "${tqaReleaseUser}@${host}:${tqaUploadPath}",
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts
                )
            } finally {
                knownHosts.delete()
            }
        }

        tqaStartHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tSTARTING {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.ssh(
                        host: host,
                        username: tqaReleaseUser,
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts,
                        command: tqaStartCommand
                )
            } finally {
                knownHosts.delete()
            }
        }
    }
}

task prdRelease() {
    description = "Upload shadow jar to prd server and restart application"
    dependsOn shadowJar
    logging.level = LogLevel.INFO

    ant.taskdef(
            name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath
    )

    ant.taskdef(
            name: 'ssh',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
            classpath: configurations.sshAntTask.asPath
    )

    // Create a new file for each execution to make
    // sure that execution doesn't fails in case
    // identity of host has been changed.
    def knownHosts = File.createTempFile("knownhosts", "txt")
    def password = new String(prdReleasePassword.decodeBase64())

    doLast {
        prdUploadHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tUPLOADING TO {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.scp(
                        file: file("build/libs/${project.name}-app.jar"),
                        todir: "${prdReleaseUser}@${host}:${prdUploadPath}",
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts
                )
            } finally {
                knownHosts.delete()
            }
        }

        prdStartHosts.split(',').each { host ->
            logger.info("#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#\n\tSTARTING {}\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#", host)
            try {
                ant.ssh(
                        host: host,
                        username: prdReleaseUser,
                        password: password,
                        trust: true,
                        verbose: true,
                        knownhosts: knownHosts,
                        command: prdStartCommand
                )
            } finally {
                knownHosts.delete()
            }
        }
    }
}